image: docker:latest # update tag to whatever version you want to use.

services:
  - docker:19.03-dind # v19版本以上会有bug https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4501

# 全局配置
variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_NAMESPACE: "yding"
  DOCKER_REGISTRY: "registry.cn-shenzhen.aliyuncs.com"
  GIT_CHECKOUT: "false"
  IMAGE_NAME: $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME
  REMOTE_REGISTER: ${DOCKER_REGISTRY}/${DOCKER_NAMESPACE}

stages:
  - code_scan
  - compile
  - build
  - deploy

before_script: # 定义在 job 执行之前的执行脚本
  - echo "hello gitlab ci"

# 登录
.docker_login_script: &docker_login
  - ls
  - pwd
  - docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD $DOCKER_REGISTRY

# ssh-key 配置
.ssh_config_script: &ssh_config_script
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan $REMOTE_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

# 通用参数
.docker_base: &job_configuration
  stage: compile
  tags:
    - docker-build
  variables:
    GIT_CHECKOUT: "true"
  only:
    changes:
      - config/**/*
      - public/**/*
      - src/**/*
      - Dockerfile
      - nginx.cnof
      - package.json
      - .gitlab-ci.yml
  except:
    - master
  retry: 1

# 代码审查
code_scan:
  stage: code_scan
  tags:
    - docker-test
  variables:
    GIT_CHECKOUT: "true"
    DOCKER_DRIVER: overlay2

  script:
    - echo 'code_scan'
    - *docker_login
    - docker run --user="$(id -u):$(id -g)" -e SONAR_HOST_URL=http://172.17.0.1:9000 --network host -v "${CI_PROJECT_DIR}:/usr/src" registry.cn-shenzhen.aliyuncs.com/yding/sonar-scanner-cli:4.5
  retry: 1
  allow_failure: true
  only:
    refs:
      - develop_ts

# 编译开发环境
compile-dev:
  <<: *job_configuration
  image: registry.cn-shenzhen.aliyuncs.com/yding/node:12.20-alpine
  # cache:
  #   key: ${CI_COMMIT_REF_NAME}-node_modules
  #   paths:
  #     - node_modules
  artifacts: # 生产制品dist
    name: "dist"
    paths:
      - dist/
  script:
    - "echo compile-dev"
    - npm config set registry=https://registry.npm.taobao.org
    - npm install
    - npm run prod_build
  only:
    refs:
      - develop_lh

# 构建开发镜像
build-dev:
  <<: *job_configuration
  stage: build
  dependencies:
    - compile-dev
  script:
    - *docker_login
    - echo 'dev_build'
    - docker build --tag ${REMOTE_REGISTER}/${IMAGE_NAME} -f Dockerfile-dev .
    - docker push "${REMOTE_REGISTER}/${IMAGE_NAME}"
  only:
    refs:
      - develop_lh
  except:
    - master
  # when: manual

deploy-dev:
  stage: deploy
  tags:
    - deploy
  variables:
    GIT_CHECKOUT: "false"
    GIT_STRATEGY: "none"
    PROJECT_DIR: "/root/projects/website/website-web"
  only:
    - develop_lh
  environment:
    name: development
    url: http://gzecloud.com/

  before_script:
    - *ssh_config_script
  script:
    - ssh -tt $REMOTE_USER@$REMOTE_HOST "cd ${PROJECT_DIR} && w && docker-compose pull && docker-compose down && docker-compose up -d"

  when: manual

# 编译正式环境
compile-prod:
  <<: *job_configuration
  image: registry.cn-shenzhen.aliyuncs.com/yding/node:12.20-alpine
  # TODO 使用缓存导致安装时 卸载了一些包 导致编译失败
  # cache:
  #   key: ${CI_PROJECT_NAME}
  #   paths:
  #     - node_modules/
  # policy: pull
  artifacts: # 生产制品dist
    name: "dist"
    paths:
      - dist/
  script:
    - "echo compile-prod"
    - npm config set registry=https://registry.npm.taobao.org
    - npm install
    - npm run prod_build
  only:
    refs:
      - /^deploy-.*$/

# 构建生产镜像
build-prod:
  <<: *job_configuration
  stage: build
  dependencies:
    - compile-prod
  script:
    - *docker_login
    - docker build --tag ${REMOTE_REGISTER}/${IMAGE_NAME} .
    - docker push "${REMOTE_REGISTER}/${IMAGE_NAME}"
  only:
    refs:
      - /^deploy-.*$/

# 部署正式环境
deploy-prod:
  stage: deploy
  tags:
    - deploy
  variables:
    GIT_CHECKOUT: "false"
    GIT_STRATEGY: "none"
    PROJECT_DIR: "/root/projects/auction/auction-web"
  only:
    - /^deploy-.*$/
  environment:
    name: production
    url: http://auction.gzecloud.com/

  before_script:
    - *ssh_config_script
  script:
    - ssh -tt $REMOTE_USER@$REMOTE_HOST "cd ${PROJECT_DIR} && w && docker-compose pull && docker-compose down && docker-compose up -d"
    # -"&& docker-compose pull && docker-compose down && docker-compose up -d && docker rmi `docker image ls -f dangling=true -q`"

  when: manual
